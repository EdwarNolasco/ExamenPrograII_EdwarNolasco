/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.editortexto;

import java.awt.Desktop;
import java.awt.HeadlessException;
import javax.swing.*;
import java.io.*;
import java.security.Principal;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.Caret;
import javax.swing.JOptionPane;
import java.io.BufferedReader;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;

/**
 *
 * @author Edwar Josué Nolasco Cabrera 20191930199 Programación 2 - 1100
 */
public class FormEditorTexto extends javax.swing.JFrame {

    /**
     * Creates new form FormEditorTexto
     */
    JFileChooser filechooser;
    File archivo;

    public FormEditorTexto() {
        initComponents();
        this.setLocationRelativeTo(null);

        jTextArea1.setLineWrap(true);       // Parte las líneas y las baja un renglón
        jTextArea1.setWrapStyleWord(true);  // Respetar y no partir palabras completas
        jTextArea1.requestFocus();
        //archivo = null;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        jMenuItem5 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Editor de Texto");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 20, 610, 440));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, -20, 600, 460));

        jMenuBar1.setBackground(new java.awt.Color(0, 102, 255));

        jMenu1.setText("Menú de Opciones");

        jMenuItem1.setBackground(new java.awt.Color(153, 153, 255));
        jMenuItem1.setText("Abrir");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuItem2.setBackground(new java.awt.Color(153, 153, 255));
        jMenuItem2.setText("Guardar");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);
        jMenu1.add(jSeparator1);

        jMenuItem3.setBackground(new java.awt.Color(153, 153, 255));
        jMenuItem3.setText("Abrir desde Internet");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setBackground(new java.awt.Color(153, 153, 255));
        jMenuItem4.setText("Buscar");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);
        jMenu1.add(jSeparator2);

        jMenuItem5.setBackground(new java.awt.Color(153, 153, 255));
        jMenuItem5.setText("Salir");
        jMenuItem5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem5ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem5);

        jMenuBar1.add(jMenu1);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem5ActionPerformed
        // TODO add your handling code here:
        System.exit(0);
    }//GEN-LAST:event_jMenuItem5ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed

        // Funcionalidad para abrir un archivo de texto
        filechooser = new JFileChooser(); //crea un nuevo objeto JfileChooser
        int returnVal = filechooser.showOpenDialog(this); //Declara la variable para almacenar la selección del usuario.

        //condicion para cuando el usuario abre o no un archivo
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            archivo = filechooser.getSelectedFile(); //tiene almacenado el archivo que el usuario ha seleccionado
            try {
                //jTextArea1.setText(null); //elimina su contenido en caso sea necesario.
                BufferedReader br = new BufferedReader(new FileReader(archivo)); //lee el archivo de texto
                String cadena; //procesa linea por linea el archivo de texto con el bucle while mientras no sea nulo
                while ((cadena = br.readLine()) != null) {
                    jTextArea1.append(cadena + "\n");
                }
            } catch (IOException ex) {
                System.out.println(ex.getMessage()); //Salida estandar de error.
            }
        } else {
            System.out.println("Cancelado.");
        }

    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // Funcionalidad para guardar cambios en ficheros de texto
/*        String texto =jTextArea1.getText();
        
        if(archivo != null){
            try {
                PrintWriter pw = new PrintWriter(archivo);
                pw.print(texto);
                pw.close();
            } catch (FileNotFoundException ex) {
                Logger.getLogger(FormEditorTexto.class.getName()).log(Level.SEVERE, null, ex);
            }
        }*/
        GuardarFichero();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        // FUNCION BUSCAR DEL MENU EDITAR

        //String textoABuscar = JOptionPane.showInputDialog(jTextArea1, "Buscar: ", "");
        //Variable tipo String que almacena el texto que está en el AreaTexto
        String textoInicialDeBusqueda = jTextArea1.getSelectedText();

        //Sentencia que determina si AreaTexto contiene texto o está vacia
        if (textoInicialDeBusqueda == null) {
            textoInicialDeBusqueda = "";
        }
        //Muestra un Input para ingresar el texto que se buscará
        String TextoBuscar = JOptionPane.showInputDialog(jTextArea1, "Buscar", textoInicialDeBusqueda);

        //Se crea un objeto tipo Carte que sirve para seleccionar el texto de la busqueda
        Caret seleccionado = jTextArea1.getCaret();

        /*
        Esto sirve para saber la posición del texto seleccionado. De esta forma se podrá hacer la búsqueda
        a partir de la posición en la que encontramos el texto previamente.
         */
        int posicionInicial = 0;
        if (seleccionado.getDot() != seleccionado.getMark()) {
            posicionInicial = seleccionado.getDot(); //Hay algo seleccioando

        }

        //La búsqueda se realiza usando el método indexOf() que además de buscar el texto admite la posición inical de búsqueda.
        String textoTotal = jTextArea1.getText();
        int posicion = textoTotal.indexOf(TextoBuscar, posicionInicial);

        /*Se utilizan los métodos setCaretPosition() que pone Dot y Mark en la posición inicial y el método
         moveCaretPosition() que hace que Dot se mueva a la siguiente posición. De esa forma el texto queda seleccionado
         */
        jTextArea1.setCaretPosition(posicion);
        jTextArea1.moveCaretPosition(posicion + TextoBuscar.length());

    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
        //jTextArea1.setText("");
        try {
            Desktop.getDesktop().browse(new URI(jTextArea1.getSelectedText()));
        } catch (HeadlessException e) {
            System.out.println(e);
        } catch (URISyntaxException ex) {
            Logger.getLogger(FormEditorTexto.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(FormEditorTexto.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    //Método para Guardar los ficheros creados en el editor
    public void GuardarFichero() {
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("Archivos de texto", "doc", "txt"); //Crea un filtro para especificar que sólo se trabajaran archivos de texto

        JFileChooser fileChooser = new JFileChooser();              //Muestra una ventana que permite navegar por los directorios
        fileChooser.setDialogTitle("Guardar");                      //Agrega el título al cuadro de diálogo
        fileChooser.setApproveButtonText("Guardar");                //Cambia el texto del botón de aceptación
        fileChooser.setFileFilter(filtro);                          //Se agrega el filtro al cuadro de diálogo
        int seleccion = fileChooser.showOpenDialog(jTextArea1);      //En "int seleccion" se guarda la selección que hizo el usario "Abir" o "Cancelar".

        if (seleccion == JFileChooser.APPROVE_OPTION) {
            File fichero = fileChooser.getSelectedFile();           //Selecciona el fichero

            try {
                PrintWriter escritor = new PrintWriter(fichero);    //Se abre el fichero
                escritor.print(jTextArea1.getText());                //Se le escribe el texto contenido en AreaTexto
                escritor.close();                                   //Se cierra el fichero.
            } catch (FileNotFoundException ex) {
                Logger.getLogger(Principal.class.getName()).log(Level.SEVERE, null, ex); //Toda va dentro de un Try Catch por cualquier error en la apertur y cierre del fichero.
            }
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormEditorTexto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormEditorTexto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormEditorTexto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormEditorTexto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormEditorTexto().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JMenuItem jMenuItem5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JTextArea jTextArea1;
    // End of variables declaration//GEN-END:variables
}
